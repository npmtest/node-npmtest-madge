{"/home/travis/build/npmtest/node-npmtest-madge/test.js":"/* istanbul instrument in package npmtest_madge */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-madge/lib.npmtest_madge.js":"/* istanbul instrument in package npmtest_madge */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_madge = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_madge = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-madge/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-madge && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_madge */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_madge\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_madge.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_madge.rollup.js'] =\n            local.assetsDict['/assets.npmtest_madge.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_madge.__dirname + '/lib.npmtest_madge.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-madge/node_modules/madge/lib/api.js":"'use strict';\n\nconst tree = require('./tree');\nconst cyclic = require('./cyclic');\nconst graph = require('./graph');\nconst log = require('./log');\n\nconst defaultConfig = {\n\tbaseDir: null,\n\texcludeRegExp: false,\n\textensions: ['js'],\n\tshowFileExtension: false,\n\tincludeNpm: false,\n\trequireConfig: null,\n\twebpackConfig: null,\n\tlayout: 'dot',\n\tfontName: 'Arial',\n\tfontSize: '14px',\n\tbackgroundColor: '#000000',\n\tnodeColor: '#c6c5fe',\n\tnoDependencyColor: '#cfffac',\n\tcyclicNodeColor: '#ff6c60',\n\tedgeColor: '#757575',\n\tgraphVizOptions: false,\n\tgraphVizPath: false,\n\tdependencyFilter: false\n};\n\nclass Madge {\n\t/**\n\t * Class constructor.\n\t * @constructor\n\t * @api public\n\t * @param {String|Array|Object} path\n\t * @param {Object} config\n\t * @return {Promise}\n\t */\n\tconstructor(path, config) {\n\t\tthis.skipped = [];\n\n\t\tif (!path) {\n\t\t\tthrow new Error('path argument not provided');\n\t\t}\n\n\t\tthis.config = Object.assign({}, defaultConfig, config);\n\n\t\tif (typeof path === 'object' && !Array.isArray(path)) {\n\t\t\tthis.tree = path;\n\t\t\tlog('using predefined tree %o', path);\n\t\t\treturn Promise.resolve(this);\n\t\t}\n\n\t\tif (typeof path === 'string') {\n\t\t\tpath = [path];\n\t\t}\n\n\t\treturn tree(path, this.config).then((res) => {\n\t\t\tthis.tree = res.tree;\n\t\t\tthis.skipped = res.skipped;\n\t\t\treturn this;\n\t\t});\n\t}\n\n\t/**\n\t * Return the module dependency graph as an object.\n\t * @api public\n\t * @return {Object}\n\t */\n\tobj() {\n\t\treturn Object\n\t\t\t.keys(this.tree)\n\t\t\t.reduce((acc, id) => {\n\t\t\t\tacc[this.stripExt(id)] = this.tree[id].map((dep) => this.stripExt(dep));\n\t\t\t\treturn acc;\n\t\t\t}, {});\n\t}\n\n\t/**\n\t * Return produced warnings.\n\t * @api public\n\t * @return {Array}\n\t */\n\twarnings() {\n\t\treturn {\n\t\t\tskipped: this.skipped\n\t\t};\n\t}\n\n\t/**\n\t * Return the modules that has circular dependencies.\n\t * @api public\n\t * @return {Object}\n\t */\n\tcircular() {\n\t\tconst circular = cyclic(this.tree);\n\n\t\tcircular.forEach((paths, idx) => {\n\t\t\tcircular[idx] = paths.map((dep) => this.stripExt(dep));\n\t\t});\n\n\t\treturn circular;\n\t}\n\n\t/**\n\t * Return a list of modules that depends on the given module.\n\t * @api public\n\t * @param  {String} id\n\t * @return {Array}\n\t */\n\tdepends(id) {\n\t\tconst tree = this.obj();\n\n\t\treturn Object\n\t\t\t.keys(tree)\n\t\t\t.filter((dep) => tree[dep].indexOf(id) >= 0);\n\t}\n\n\t/**\n\t * Return the module dependency graph as DOT output.\n\t * @api public\n\t * @return {Promise}\n\t */\n\tdot() {\n\t\treturn graph.dot(this.obj(), this.config);\n\t}\n\n\t/**\n\t * Write dependency graph to image.\n\t * @api public\n\t * @param  {String} imagePath\n\t * @return {Promise}\n\t */\n\timage(imagePath) {\n\t\tif (!imagePath) {\n\t\t\treturn Promise.reject(new Error('imagePath not provided'));\n\t\t}\n\n\t\treturn graph.image(this.obj(), this.circular(), imagePath, this.config);\n\t}\n\n\t/**\n\t * Remove file extension from the given module id\n\t * @param  {String} id\n\t * @return {String}\n\t */\n\tstripExt(id) {\n\t\tif (this.config.showFileExtension) {\n\t\t\treturn id;\n\t\t}\n\n\t\treturn id.substr(0, id.lastIndexOf('.')) || id;\n\t}\n}\n\n/**\n * Expose API.\n * @param {String|Array} path\n * @param {Object} config\n * @return {Promise}\n */\nmodule.exports = (path, config) => new Madge(path, config);\n","/home/travis/build/npmtest/node-npmtest-madge/node_modules/madge/lib/tree.js":"'use strict';\n\nconst os = require('os');\nconst fs = require('mz/fs');\nconst path = require('path');\nconst commondir = require('commondir');\nconst walk = require('walkdir');\nconst dependencyTree = require('dependency-tree');\nconst log = require('./log');\n\n/**\n * Check if running on Windows.\n * @type {Boolean}\n */\nconst isWin = (os.platform() === 'win32');\n\nclass Tree {\n\t/**\n\t * Class constructor.\n\t * @constructor\n\t * @api public\n\t * @param {Array} srcPaths\n\t * @param {Object} config\n\t * @return {Promise}\n\t */\n\tconstructor(srcPaths, config) {\n\t\tthis.srcPaths = srcPaths.map((s) => path.resolve(s));\n\t\tlog('using src paths %o', this.srcPaths);\n\n\t\tthis.config = config;\n\t\tlog('using config %o', this.config);\n\n\t\treturn this.getDirs()\n\t\t\t.then(this.setBaseDir.bind(this))\n\t\t\t.then(this.getFiles.bind(this))\n\t\t\t.then(this.generateTree.bind(this));\n\t}\n\n\t/**\n\t * Set the base directory (compute the common one if multiple).\n\t * @param {Array} dirs\n\t */\n\tsetBaseDir(dirs) {\n\t\tif (this.config.baseDir) {\n\t\t\tthis.baseDir = path.resolve(this.config.baseDir);\n\t\t} else {\n\t\t\tthis.baseDir = commondir(dirs);\n\t\t}\n\n\t\tlog('using base directory %s', this.baseDir);\n\t}\n\n\t/**\n\t * Get directories from the source paths\n\t * @return {Promise} resolved with an array of directories\n\t */\n\tgetDirs() {\n\t\treturn Promise\n\t\t\t.all(this.srcPaths.map((srcPath) => {\n\t\t\t\treturn fs\n\t\t\t\t\t.stat(srcPath)\n\t\t\t\t\t.then((stats) => stats.isDirectory() ? srcPath : path.dirname(path.resolve(srcPath)));\n\t\t\t}));\n\t}\n\n\t/**\n\t * Get all files found from the source paths\n\t * @return {Promise} resolved with an array of files\n\t */\n\tgetFiles() {\n\t\tconst files = [];\n\n\t\treturn Promise\n\t\t\t.all(this.srcPaths.map((srcPath) => {\n\t\t\t\treturn fs\n\t\t\t\t\t.stat(srcPath)\n\t\t\t\t\t.then((stats) => {\n\t\t\t\t\t\tif (stats.isFile()) {\n\t\t\t\t\t\t\tfiles.push(path.resolve(srcPath));\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\twalk.sync(srcPath, (filePath, stat) => {\n\t\t\t\t\t\t\tif (this.isNpmPath(filePath) || !stat.isFile()) {\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tconst ext = path.extname(filePath).replace('.', '');\n\n\t\t\t\t\t\t\tif (files.indexOf(filePath) < 0 && this.config.extensions.indexOf(ext) >= 0) {\n\t\t\t\t\t\t\t\tfiles.push(filePath);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n\t\t\t}))\n\t\t\t.then(() => files);\n\t}\n\n\t/**\n\t * Generate the tree from the given files\n\t * @param  {Array} files\n\t * @return {Object}\n\t */\n\tgenerateTree(files) {\n\t\tconst depTree = {};\n\t\tconst visited = {};\n\t\tconst nonExistent = [];\n\t\tconst npmPaths = {};\n\t\tconst pathCache = {};\n\n\t\tfiles.forEach((file) => {\n\t\t\tif (visited[file]) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tObject.assign(depTree, dependencyTree({\n\t\t\t\tfilename: file,\n\t\t\t\tdirectory: this.baseDir,\n\t\t\t\trequireConfig: this.config.requireConfig,\n\t\t\t\twebpackConfig: this.config.webpackConfig,\n\t\t\t\tvisited: visited,\n\t\t\t\tfilter: (dependencyFilePath, traversedFilePath) => {\n\t\t\t\t\tlet dependencyFilterRes = true;\n\t\t\t\t\tconst isNpmPath = this.isNpmPath(dependencyFilePath);\n\n\t\t\t\t\tif (this.config.dependencyFilter) {\n\t\t\t\t\t\tdependencyFilterRes = this.config.dependencyFilter(dependencyFilePath, traversedFilePath, this.baseDir);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (this.config.includeNpm && isNpmPath) {\n\t\t\t\t\t\t(npmPaths[traversedFilePath] = npmPaths[traversedFilePath] || []).push(dependencyFilePath);\n\t\t\t\t\t}\n\n\t\t\t\t\treturn !isNpmPath && (dependencyFilterRes || dependencyFilterRes === undefined);\n\t\t\t\t},\n\t\t\t\tdetective: this.config.detectiveOptions,\n\t\t\t\tnonExistent: nonExistent\n\t\t\t}));\n\t\t});\n\n\t\tlet tree = this.convertTree(depTree, {}, pathCache, npmPaths);\n\n\t\tfor (const npmKey in npmPaths) {\n\t\t\tconst id = this.processPath(npmKey, pathCache);\n\n\t\t\tnpmPaths[npmKey].forEach((npmPath) => {\n\t\t\t\ttree[id].push(this.processPath(npmPath, pathCache));\n\t\t\t});\n\t\t}\n\n\t\tif (this.config.excludeRegExp) {\n\t\t\ttree = this.exclude(tree, this.config.excludeRegExp);\n\t\t}\n\n\t\treturn {\n\t\t\ttree: this.sort(tree),\n\t\t\tskipped: nonExistent\n\t\t};\n\t}\n\n\t/**\n\t * Convert deep tree produced by dependency-tree to a\n\t * shallow (one level deep) tree used by madge.\n\t * @param  {Object} depTree\n\t * @param  {Object} tree\n\t * @param  {Object} pathCache\n\t * @return {Object}\n\t */\n\tconvertTree(depTree, tree, pathCache) {\n\t\tfor (const key in depTree) {\n\t\t\tconst id = this.processPath(key, pathCache);\n\n\t\t\tif (!tree[id]) {\n\t\t\t\ttree[id] = [];\n\n\t\t\t\tfor (const dep in depTree[key]) {\n\t\t\t\t\ttree[id].push(this.processPath(dep, pathCache));\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.convertTree(depTree[key], tree, pathCache);\n\t\t}\n\n\t\treturn tree;\n\t}\n\n\t/**\n\t * Process absolute path and return a shorter one.\n\t * @param  {String} absPath\n\t * @param  {Object} cache\n\t * @return {String}\n\t */\n\tprocessPath(absPath, cache) {\n\t\tif (cache[absPath]) {\n\t\t\treturn cache[absPath];\n\t\t}\n\n\t\tlet relPath = path.relative(this.baseDir, absPath);\n\n\t\tif (isWin) {\n\t\t\trelPath = relPath.replace(/\\\\/g, '/');\n\t\t}\n\n\t\tcache[absPath] = relPath;\n\n\t\treturn relPath;\n\t}\n\n\t/**\n\t * Check if path is from NPM folder\n\t * @param  {String} path\n\t * @return {Boolean}\n\t */\n\tisNpmPath(path) {\n\t\treturn path.indexOf('node_modules') >= 0;\n\t}\n\n\t/**\n\t * Exclude modules from tree using RegExp.\n\t * @param  {Object} tree\n\t * @param  {Array} excludeRegExp\n\t * @return {Object}\n\t */\n\texclude(tree, excludeRegExp) {\n\t\tconst regExpList = excludeRegExp.map((re) => new RegExp(re));\n\t\tconst config = this.config;\n\n\t\tfunction regExpFilter(id) {\n\t\t\tif (!config.showFileExtension) {\n\t\t\t\tid = id.substr(0, id.lastIndexOf('.')) || id;\n\t\t\t}\n\n\t\t\treturn regExpList.findIndex((regexp) => regexp.test(id)) < 0;\n\t\t}\n\n\t\treturn Object\n\t\t\t.keys(tree)\n\t\t\t.filter(regExpFilter)\n\t\t\t.reduce((acc, id) => {\n\t\t\t\tacc[id] = tree[id].filter(regExpFilter);\n\t\t\t\treturn acc;\n\t\t\t}, {});\n\t}\n\n\t/**\n\t * Sort tree.\n\t * @param  {Object} tree\n\t * @return {Object}\n\t */\n\tsort(tree) {\n\t\treturn Object\n\t\t\t.keys(tree)\n\t\t\t.sort()\n\t\t\t.reduce((acc, id) => {\n\t\t\t\tacc[id] = tree[id].sort();\n\t\t\t\treturn acc;\n\t\t\t}, {});\n\t}\n}\n\n /**\n  * Expose API.\n  * @param {Array} srcPaths\n  * @param {Object} config\n  * @return {Promise}\n  */\nmodule.exports = (srcPaths, config) => new Tree(srcPaths, config);\n","/home/travis/build/npmtest/node-npmtest-madge/node_modules/madge/lib/log.js":"'use strict';\n\nmodule.exports = require('debug')('madge');\n","/home/travis/build/npmtest/node-npmtest-madge/node_modules/madge/lib/cyclic.js":"'use strict';\n\n/**\n * Get path to the circular dependency.\n * @param  {String} parent\n * @param  {Object} unresolved\n * @return {Array}\n */\nfunction getPath(parent, unresolved) {\n\tlet parentVisited = false;\n\n\treturn Object.keys(unresolved).filter((module) => {\n\t\tif (module === parent) {\n\t\t\tparentVisited = true;\n\t\t}\n\t\treturn parentVisited && unresolved[module];\n\t});\n}\n\n/**\n * A circular dependency is occurring when we see a software package\n * more than once, unless that software package has all its dependencies resolved.\n * @param  {String} id\n * @param  {Object} modules\n * @param  {Object} circular\n * @param  {Object} resolved\n * @param  {Object} unresolved\n */\nfunction resolver(id, modules, circular, resolved, unresolved) {\n\tunresolved[id] = true;\n\n\tif (modules[id]) {\n\t\tmodules[id].forEach((dependency) => {\n\t\t\tif (!resolved[dependency]) {\n\t\t\t\tif (unresolved[dependency]) {\n\t\t\t\t\tcircular.push(getPath(dependency, unresolved));\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tresolver(dependency, modules, circular, resolved, unresolved);\n\t\t\t}\n\t\t});\n\t}\n\n\tresolved[id] = true;\n\tunresolved[id] = false;\n}\n\n/**\n * Finds all circular dependencies for the given modules.\n * @param  {Object} modules\n * @return {Array}\n */\nmodule.exports = function (modules) {\n\tconst circular = [];\n\tconst resolved = {};\n\tconst unresolved = {};\n\n\tObject.keys(modules).forEach((id) => {\n\t\tresolver(id, modules, circular, resolved, unresolved);\n\t});\n\n\treturn circular;\n};\n","/home/travis/build/npmtest/node-npmtest-madge/node_modules/madge/lib/graph.js":"'use strict';\n\nconst path = require('path');\nconst fs = require('mz/fs');\nconst exec = require('mz/child_process').exec;\nconst graphviz = require('graphviz');\n\n/**\n * Set color on a node.\n * @param  {Object} node\n * @param  {String} color\n */\nfunction setNodeColor(node, color) {\n\tnode.set('color', color);\n\tnode.set('fontcolor', color);\n}\n\n/**\n * Check if Graphviz is installed on the system.\n * @param  {Object} config\n * @return {Promise}\n */\nfunction checkGraphvizInstalled(config) {\n\tif (config.graphVizPath) {\n\t\tconst cmd = path.join(config.graphVizPath, 'gvpr -V');\n\t\treturn exec(cmd)\n\t\t\t.catch(() => {\n\t\t\t\tthrow new Error('Could not execute ' + cmd);\n\t\t\t});\n\t}\n\n\treturn exec('gvpr -V')\n\t\t.catch((error) => {\n\t\t\tthrow new Error('Graphviz could not be found. Ensure that \"gvpr\" is in your $PATH.\\n' + error);\n\t\t});\n}\n\n/**\n * Return options to use with graphviz digraph.\n * @param  {Object} config\n * @return {Object}\n */\nfunction createGraphvizOptions(config) {\n\tconst graphVizOptions = config.graphVizOptions || {};\n\n\treturn {\n\t\tG: Object.assign({\n\t\t\toverlap: false,\n\t\t\tpad: 0.111,\n\t\t\tlayout: config.layout,\n\t\t\tbgcolor: config.backgroundColor\n\t\t}, graphVizOptions.G),\n\t\tE: Object.assign({\n\t\t\tcolor: config.edgeColor\n\t\t}, graphVizOptions.E),\n\t\tN: Object.assign({\n\t\t\tfontname: config.fontName,\n\t\t\tfontsize: config.fontSize,\n\t\t\tcolor: config.nodeColor,\n\t\t\tfontcolor: config.nodeColor\n\t\t}, graphVizOptions.N)\n\t};\n}\n\n/**\n * Creates the graphviz graph.\n * @param  {Object} modules\n * @param  {Array} circular\n * @param  {Object} config\n * @param  {Object} options\n * @return {Promise}\n */\nfunction createGraph(modules, circular, config, options) {\n\tconst g = graphviz.digraph('G');\n\tconst nodes = {};\n\tconst cyclicModules = circular.reduce((a, b) => a.concat(b), []);\n\n\tif (config.graphVizPath) {\n\t\tg.setGraphVizPath(config.graphVizPath);\n\t}\n\n\tObject.keys(modules).forEach((id) => {\n\t\tnodes[id] = nodes[id] || g.addNode(id);\n\n\t\tif (!modules[id].length) {\n\t\t\tsetNodeColor(nodes[id], config.noDependencyColor);\n\t\t} else if (cyclicModules.indexOf(id) >= 0) {\n\t\t\tsetNodeColor(nodes[id], config.cyclicNodeColor);\n\t\t}\n\n\t\tmodules[id].forEach((depId) => {\n\t\t\tnodes[depId] = nodes[depId] || g.addNode(depId);\n\n\t\t\tif (!modules[depId]) {\n\t\t\t\tsetNodeColor(nodes[depId], config.noDependencyColor);\n\t\t\t}\n\n\t\t\tg.addEdge(nodes[id], nodes[depId]);\n\t\t});\n\t});\n\n\treturn new Promise((resolve, reject) => {\n\t\tg.output(options, resolve, (code, out, err) => {\n\t\t\treject(new Error(err));\n\t\t});\n\t});\n}\n\n/**\n * Creates an image from the module dependency graph.\n * @param  {Object} modules\n * @param  {Array} circular\n * @param  {String} imagePath\n * @param  {Object} config\n * @return {Promise}\n */\nmodule.exports.image = function (modules, circular, imagePath, config) {\n\tconst options = createGraphvizOptions(config);\n\n\toptions.type = path.extname(imagePath).replace('.', '') || 'png';\n\n\treturn checkGraphvizInstalled(config)\n\t\t.then(() => {\n\t\t\treturn createGraph(modules, circular, config, options)\n\t\t\t\t.then((image) => fs.writeFile(imagePath, image))\n\t\t\t\t.then(() => path.resolve(imagePath));\n\t\t});\n};\n\n/**\n * Return the module dependency graph as DOT output.\n * @param  {Object} modules\n * @param  {Object} config\n * @return {Promise}\n */\nmodule.exports.dot = function (modules, config) {\n\tconst nodes = {};\n\tconst g = graphviz.digraph('G');\n\n\treturn checkGraphvizInstalled(config)\n\t\t.then(() => {\n\t\t\tObject.keys(modules).forEach((id) => {\n\t\t\t\tnodes[id] = nodes[id] || g.addNode(id);\n\n\t\t\t\tmodules[id].forEach((depId) => {\n\t\t\t\t\tnodes[depId] = nodes[depId] || g.addNode(depId);\n\t\t\t\t\tg.addEdge(nodes[id], nodes[depId]);\n\t\t\t\t});\n\t\t\t});\n\n\t\t\treturn g.to_dot();\n\t\t});\n};\n","/home/travis/build/npmtest/node-npmtest-madge/node_modules/madge/bin/cli.js":"#!/usr/bin/env node\n'use strict';\n\nconst path = require('path');\nconst process = require('process');\nconst program = require('commander');\nconst rc = require('rc')('madge');\nconst version = require('../package.json').version;\nconst ora = require('ora');\nconst chalk = require('chalk');\nconst startTime = Date.now();\n\nprogram\n\t.version(version)\n\t.usage('[options] <src...>')\n\t.option('-b, --basedir <path>', 'base directory for resolving paths')\n\t.option('-s, --summary', 'show dependency count summary')\n\t.option('-c, --circular', 'show circular dependencies')\n\t.option('-d, --depends <name>', 'show module dependents')\n\t.option('-x, --exclude <regexp>', 'exclude modules using RegExp')\n\t.option('-j, --json', 'output as JSON')\n\t.option('-i, --image <file>', 'write graph to file as an image')\n\t.option('-l, --layout <name>', 'layout engine to use for graph (dot/neato/fdp/sfdp/twopi/circo)')\n\t.option('--dot', 'show graph using the DOT language')\n\t.option('--extensions <list>', 'comma separated string of valid file extensions')\n\t.option('--show-extension', 'include file extension in module name', false)\n\t.option('--require-config <file>', 'path to RequireJS config')\n\t.option('--webpack-config <file>', 'path to webpack config')\n\t.option('--include-npm', 'include shallow NPM modules', false)\n\t.option('--no-color', 'disable color in output and image', false)\n\t.option('--stdin', 'read predefined tree from STDIN', false)\n\t.option('--warning', 'show warnings about skipped files', false)\n\t.option('--debug', 'turn on debug output', false)\n\t.parse(process.argv);\n\nif (!program.args.length && !program.stdin) {\n\tconsole.log(program.helpInformation());\n\tprocess.exit(1);\n}\n\nif (program.debug) {\n\tprocess.env.DEBUG = '*';\n}\n\nif (!program.color) {\n\tprocess.env.DEBUG_COLORS = false;\n}\n\nconst log = require('../lib/log');\nconst output = require('../lib/output');\nconst madge = require('../lib/api');\nconst config = Object.assign({}, rc);\nconst spinner = ora({\n\ttext: 'Finding files',\n\tcolor: 'white',\n\tinterval: 100000\n});\n\nlet exitCode = 0;\n\ndelete config._;\ndelete config.config;\ndelete config.configs;\n\nif (rc.config) {\n\tlog('using runtime config %s', rc.config);\n}\n\nif (program.basedir) {\n\tconfig.baseDir = program.basedir;\n}\n\nif (program.exclude) {\n\tconfig.excludeRegExp = [program.exclude];\n}\n\nif (program.extensions) {\n\tconfig.fileExtensions = program.extensions.split(',').map((s) => s.trim());\n}\n\nif (program.showExtension) {\n\tconfig.showFileExtension = true;\n}\n\nif (program.requireConfig) {\n\tconfig.requireConfig = program.requireConfig;\n}\n\nif (program.webpackConfig) {\n\tconfig.webpackConfig = program.webpackConfig;\n}\n\nif (program.includeNpm) {\n\tconfig.includeNpm = program.includeNpm;\n}\n\nif (!program.color) {\n\tconfig.backgroundColor = '#ffffff';\n\tconfig.nodeColor = '#00000';\n\tconfig.noDependencyColor = '#00000';\n\tconfig.cyclicNodeColor = '#000000';\n\tconfig.edgeColor = '#757575';\n}\n\nfunction dependencyFilter() {\n\tlet prevFile;\n\n\treturn (dependencyFilePath, traversedFilePath, baseDir) => {\n\t\tif (prevFile !== traversedFilePath) {\n\t\t\tconst relPath = path.relative(baseDir, traversedFilePath);\n\t\t\tconst dir = path.dirname(relPath) + '/';\n\t\t\tconst file = path.basename(relPath);\n\n\t\t\tspinner.text = chalk.grey(dir) + chalk.cyan(file);\n\t\t\tspinner.render();\n\t\t\tprevFile = traversedFilePath;\n\t\t}\n\t};\n}\n\nnew Promise((resolve, reject) => {\n\tif (program.stdin) {\n\t\tlet buffer = '';\n\n\t\tprocess.stdin\n\t\t\t.resume()\n\t\t\t.setEncoding('utf8')\n\t\t\t.on('data', (chunk) => {\n\t\t\t\tbuffer += chunk;\n\t\t\t})\n\t\t\t.on('end', () => {\n\t\t\t\ttry {\n\t\t\t\t\tresolve(JSON.parse(buffer));\n\t\t\t\t} catch (e) {\n\t\t\t\t\treject(e);\n\t\t\t\t}\n\t\t\t});\n\t} else {\n\t\tresolve(program.args);\n\t}\n})\n.then((src) => {\n\tif (!program.json && !program.dot) {\n\t\tspinner.start();\n\t\tconfig.dependencyFilter = dependencyFilter();\n\t}\n\n\treturn madge(src, config);\n})\n.then((res) => {\n\tif (!program.json && !program.dot) {\n\t\tspinner.stop();\n\t\toutput.getResultSummary(res, startTime);\n\t}\n\n\tif (program.summary) {\n\t\toutput.summary(res.obj(), {\n\t\t\tjson: program.json\n\t\t});\n\n\t\treturn res;\n\t}\n\n\tif (program.depends) {\n\t\toutput.depends(res.depends(program.depends), {\n\t\t\tjson: program.json\n\t\t});\n\n\t\treturn res;\n\t}\n\n\tif (program.circular) {\n\t\tconst circular = res.circular();\n\n\t\toutput.circular(spinner, res, circular, {\n\t\t\tjson: program.json\n\t\t});\n\n\t\tif (circular.length) {\n\t\t\texitCode = 1;\n\t\t}\n\n\t\treturn res;\n\t}\n\n\tif (program.image) {\n\t\treturn res.image(program.image).then((imagePath) => {\n\t\t\tspinner.succeed(`${chalk.bold('Image created at')} ${chalk.cyan.bold(imagePath)}`);\n\t\t\treturn res;\n\t\t});\n\t}\n\n\tif (program.dot) {\n\t\treturn res.dot().then((output) => {\n\t\t\tprocess.stdout.write(output);\n\t\t\treturn res;\n\t\t});\n\t}\n\n\toutput.list(res.obj(), {\n\t\tjson: program.json\n\t});\n\n\treturn res;\n})\n.then((res) => {\n\tif (program.warning && !program.json) {\n\t\toutput.warnings(res);\n\t}\n\n\tif (!program.json && !program.dot) {\n\t\tconsole.log('');\n\t}\n\n\tprocess.exit(exitCode);\n})\n.catch((err) => {\n\tspinner.stop();\n\tconsole.log('\\n%s %s\\n', chalk.red('✖'), err.stack);\n\tprocess.exit(1);\n});\n","/home/travis/build/npmtest/node-npmtest-madge/node_modules/madge/lib/output.js":"'use strict';\n\nconst chalk = require('chalk');\nconst pluralize = require('pluralize');\nconst prettyMs = require('pretty-ms');\n\n/**\n * Print given object as JSON.\n * @param  {Object} obj\n * @return {String}\n */\nfunction printJSON(obj) {\n\treturn console.log(JSON.stringify(obj, null, '  '));\n}\n\n/**\n * Print module dependency graph as indented text (or JSON).\n * @param  {Object} modules\n * @param  {Object} opts\n * @return {undefined}\n */\nmodule.exports.list = function (modules, opts) {\n\topts = opts || {};\n\n\tif (opts.json) {\n\t\treturn printJSON(modules);\n\t}\n\n\tObject.keys(modules).forEach((id) => {\n\t\tconsole.log(chalk.cyan.bold(id));\n\t\tmodules[id].forEach((depId) => {\n\t\t\tconsole.log(chalk.grey(`  ${depId}`));\n\t\t});\n\t});\n};\n\n/**\n * Print a summary of module dependencies.\n * @param  {Object} modules\n * @param  {Object} opts\n * @return {undefined}\n */\nmodule.exports.summary = function (modules, opts) {\n\tconst o = {};\n\n\topts = opts || {};\n\n\tObject.keys(modules).sort((a, b) => {\n\t\treturn modules[b].length - modules[a].length;\n\t}).forEach((id) => {\n\t\tif (opts.json) {\n\t\t\to[id] = modules[id].length;\n\t\t} else {\n\t\t\tconsole.log('%s %s', chalk.cyan.bold(modules[id].length), chalk.grey(id));\n\t\t}\n\t});\n\n\tif (opts.json) {\n\t\treturn printJSON(o);\n\t}\n};\n\n/**\n * Print the result from Madge.circular().\n * @param  {Object} spinner\n * @param  {Object} res\n * @param  {Array} circular\n * @param  {Object} opts\n * @return {undefined}\n */\nmodule.exports.circular = function (spinner, res, circular, opts) {\n\tif (opts.json) {\n\t\treturn printJSON(circular);\n\t}\n\n\tconst cyclicCount = Object.keys(circular).length;\n\n\tif (!circular.length) {\n\t\tspinner.succeed(chalk.bold('No circular dependency found!'));\n\t} else {\n\t\tspinner.fail(chalk.red.bold(`Found ${pluralize('circular dependency', cyclicCount, true)}!\\n`));\n\t\tcircular.forEach((path, idx) => {\n\t\t\tprocess.stdout.write(chalk.dim(idx + 1 + ') '));\n\t\t\tpath.forEach((module, idx) => {\n\t\t\t\tif (idx) {\n\t\t\t\t\tprocess.stdout.write(chalk.dim(' > '));\n\t\t\t\t}\n\t\t\t\tprocess.stdout.write(chalk.cyan.bold(module));\n\t\t\t});\n\t\t\tprocess.stdout.write('\\n');\n\t\t});\n\t}\n};\n\n/**\n * Print the result from Madge.depends().\n * @param  {Array} depends\n * @param  {Object} opts\n * @return {undefined}\n */\nmodule.exports.depends = function (depends, opts) {\n\tif (opts.json) {\n\t\treturn printJSON(depends);\n\t}\n\n\tdepends.forEach((id) => {\n\t\tconsole.log(chalk.cyan.bold(id));\n\t});\n};\n\n/**\n * Print warnings to the console.\n * @param  {Object} res\n * @return {undefined}\n */\nmodule.exports.warnings = function (res) {\n\tconst skipped = res.warnings().skipped;\n\n\tif (skipped.length) {\n\t\tconsole.log(chalk.yellow.bold(`\\n✖ Skipped ${pluralize('file', skipped.length, true)}\\n`));\n\n\t\tskipped.forEach((file) => {\n\t\t\tconsole.log(chalk.yellow(file));\n\t\t});\n\t}\n};\n\n/**\n * Get a summary from the result.\n * @param  {Object} res\n * @param  {Number} startTime\n * @return {undefined}\n */\nmodule.exports.getResultSummary = function (res, startTime) {\n\tconst warningCount = res.warnings().skipped.length;\n\tconst fileCount = Object.keys(res.obj()).length;\n\n\tconsole.log('Processed %s %s %s %s\\n',\n\t\tchalk.bold(fileCount),\n\t\tpluralize('file', fileCount),\n\t\tchalk.dim(`(${prettyMs(Date.now() - startTime)})`),\n\t\twarningCount ? '(' + chalk.yellow.bold(pluralize('warning', warningCount, true)) + ')' : ''\n\t);\n};\n"}